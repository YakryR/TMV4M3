library(highcharter)
library(shiny)
library(DT)
require(tidyverse)
#save(MstOrn, file="MstOrn.Rdata")
load("www/MstOrn.rdata")
yodo <- MstOrn$r_mst_rsl_ydo
MstOrn <- MstOrn %>% mutate(fch_rcl_mst=sample(seq(as.Date('2014/01/01'), as.Date('2018/09/30'), by="day"), 289))
# Define UI for application that draws a histogram
ui <- fluidPage(
  # Application title
  titlePanel("Informe descriptivo de datos"),
  
  # Sidebar with a slider input for number of bins 
  sidebarLayout(
    sidebarPanel(
      helpText("Aplicacion desarrollada para exploración de datos"),
      # conditionalPanel(condition = "input.pestaña=='Captura de datos'",
      #                  selectInput("prv", "Seleccione la provincia",
      #                              choices = unique(MstOrn$s_prv_nme))
      # ),
      conditionalPanel(condition = "input.pestaña!='Datos Registrados'",
                       sliderInput("bins","Número de alumnos:",min = 1,max = 300,value = 30)
      ),
      conditionalPanel(condition = "input.pestaña=='Serie de tiempo'",
                       selectInput("prv", "Seleccione la provincia",
                                   choices = unique(MstOrn$s_prv_nme)),
                       textOutput("nreg"),
                       dateRangeInput('date',
                                      label = 'Seleccione el período a visualizar:',
                                      start = "2014-01-01", end = "2018-09-30",
                                      language = "es"),
                       actionButton("boton", "Actualizar")
      ),
      conditionalPanel(condition = "input.pestaña=='Datos Registrados'",
                       numericInput("n","Número de registros visibles en la tabla ", 
                                    value = 10, min = 5, max = 50)
      )
    ),
    
    # Show a plot of the generated distribution
    mainPanel(
      tabsetPanel(
        tabPanel("Datos Registrados", div(DTOutput("tabla"), style="font-size:60%")
        ),
        tabPanel("Alumnos por ingesta de yodo", plotOutput("histDDY")),
        tabPanel("Concentracion Yodo Orina vs. Sal", highchartOutput("graf")),
        navbarMenu("Mas", tabPanel("Serie de tiempo"), tabPanel("Contacto")),
        id="pestaña"
      )
    )
  )
)

# Define server logic required to draw a histogram
server <- function(input, output) {
  tmp <- reactive({
    MstOrn <- MstOrn %>% filter(s_prv_nme==input$prv)
    MstOrn <- MstOrn %>% filter(fch_rcl_mst>=input$date[1] & fch_rcl_mst<=input$date[2])
    resumen <- group_by(MstOrn, fch_rcl_mst) %>% 
      summarize(Registros=n(), Alumnos=length(unique(MstOrn$i_pct_cde)))
    resumen
  })
  
  tmp1 <- reactive({
    dim(tmp())[1]
  })
  
  output$nreg <- renderText(tmp1())
  output$diarios <- renderHighchart({
    resumen <- tmp()
    xts <- xts(resumen[, -1], order.by=as.POSIXct(resumen$"fch_rcl_mst"))
    highchart(type = "stock") %>%
      hc_title(text = "Registros diarios") %>%
      hc_subtitle(text = "Numero de registros y provincias") %>%
      hc_add_series_xts(xts$Registros, name = "Registros") %>%
      hc_add_series_xts(xts$Provincias, name = "Provincias")
  })
  
  output$tabla_diarios <- renderTable({
    tmp()
  }) 
  output$tabla <- renderDT({
    datatable(MstOrn[1:input$n,],
              fillContainer = TRUE,
              extensions =c('Buttons', 'Scroller'), 
              options = list(dom = 'Bfrtip',buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
                             deferRender = TRUE, scrollY = 200, scroller = TRUE,
                             language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
              ))
  }) #input esta unido a la creacion de la caja donde cambiamos los n
  
  output$graf <- renderHighchart({
    bins <- seq(min(yodo), max(yodo), length.out = input$bins + 1)
    mpg <- MstOrn[c(1:input$bins),] 
    hchart(mpg, "scatter", hcaes(x = r_mst_rsl_ydo, y = yodo_sal, group = s_mst_mrc)) %>% 
      hc_exporting(
        enabled = TRUE
      )
  })
  
  output$histDDY <- renderPlot({
    bins <- seq(min(yodo), max(yodo), length.out = input$bins + 1)
    hist(yodo, main = "Histograma de cantidad de yodo en orina", 
         xlab = "Yodo en orina",
         ylab="Cantidad de alumnos", col = 'darkgray', border = 'white',
         breaks = bins)
  })
}
# Run the application 
shinyApp(ui = ui, server = server)
