require(tidyverse)
require(realxl)
## Funciones
EDA_modificado <- function (x, trim = 0.05) {
  require(e1071)
  Altblue <- "#A9E2FF"
  Adkblue <- "#0080FF"
  Ared <- "#C51111"
  varname <- deparse(substitute(x))
  N <- length(x)
  UM <- sum(is.na(x))
  n <- N - UM
  x <- x[!(is.na(x) > 0)]
  LQ1 <- (n + 1)/4
  LQ3 <- (3 * (n + 1))/4
  Sort <- sort(x)
  V1 <- floor(LQ1)
  V2 <- floor(LQ3)
  V3 <- V1 + 1
  V4 <- V2 + 1
  Q1 <- round(Sort[V1] + (LQ1 - V1) * (Sort[V3] - Sort[V1]), 
              3)
  Q3 <- round(Sort[V2] + (LQ3 - V2) * (Sort[V4] - Sort[V2]), 
              3)
  IQR <- round(Q3 - Q1, 3)
  Min <- round(min(x), 3)
  Max <- round(max(x), 3)
  Stdev <- round(sd(x, na.rm = TRUE), 3)
  Mean <- round(mean(x, na.rm = TRUE), 3)
  Median <- round(median(x, na.rm = TRUE), 3)
  TrMean <- round(mean(x, trim = trim), 3)
  Var <- round(var(x, na.rm = TRUE), 3)
  SE <- round(Stdev/sqrt(n), 3)
  Range <- round(Max - Min, 3)
  par(omi = c(0, 0, 0, 0))
  #par(mfrow = c(2, 2))
  par(mar = c(4, 4, 2, 2))
  par(pty = "s")
  print(varname)
  hist(x, probability = TRUE, col = Adkblue, xlab = "", ylab = "", 
       #axes = FALSE, main = paste("Histogram of", varname))
       axes = TRUE, main = paste("Histograma de", varname))
  box()
  iqd <- summary(x)[5] - summary(x)[2]
  plot(density(x, width = 2 * iqd, na.rm = TRUE), xlab = "", 
       # ylab = "", axes = FALSE, type = "n", main = paste("Density of", 
       #                                                   varname))
       ylab = "", axes = TRUE, type = "n", main = paste("Densidad de", 
                                                        varname))
  lines(density(x, width = 2 * iqd, na.rm = TRUE), col = Ared)
  box()
  l.out <- x[x < (Q1 - 1.5 * IQR)]
  r.out <- x[x > (Q3 + 1.5 * IQR)]
  outliers <- c(l.out, r.out)
  rest <- x[x > (Q1 - 1.5 * IQR) & x < (Q3 + 1.5 * IQR)]
  Minrest <- min(rest)
  Maxrest <- max(rest)
  plot(x, x, main = paste("Boxplot de", varname), xlab = "", 
       ylab = "", axes = TRUE, type = "n", xlim = c(min(x), 
                                                    max(x)), ylim = c(0, 1))
  box()
  polygon(c(Q1, Q1, Q3, Q3), c(0.3, 0.7, 0.7, 0.3), density = -1, 
          col = Altblue)
  points(outliers, c(rep(0.5, length(outliers))), col = Ared)
  lines(c(min(rest), Q1), c(0.5, 0.5), lty = 1)
  lines(c(Q3, max(rest)), c(0.5, 0.5), lty = 1)
  lines(c(min(rest), min(rest)), c(0.4, 0.6))
  lines(c(max(rest), max(rest)), c(0.4, 0.6))
  lines(c(Q1, Q1), c(0.3, 0.7))
  lines(c(Q3, Q3), c(0.3, 0.7))
  lines(c(Median, Median), c(0.3, 0.7))
  lines(c(Q1, Q3), c(0.3, 0.3))
  lines(c(Q1, Q3), c(0.7, 0.7))
  points(Mean, 0.5, pch = 16, col = "black")
  # qqnorm(x, col = "black", main = paste("Q-Q Plot of", varname), 
  #        xlab = "", ylab = "", axes = FALSE)
  qqnorm(x, col = "black", main = paste("Grafico Q-Q de", varname), 
         xlab = "Cuantiles teóricos", ylab = "Cuantiles muestrales", axes = TRUE)
  qqline(x, col = Ared)
  box()
  # mtext("EXPLORATORY  DATA  ANALYSIS", side = 3, outer = TRUE, 
  #       cex = 1.5, col = Adkblue, line = 1)
  # mtext("Analisis exploratorio de datos", side = 3, outer = TRUE, 
  #       cex = 1.5, col = Adkblue, line = 1)
  par(oma = c(0, 0, 0, 0))
  par(mfrow = c(1, 1))
  par(mar = c(0, 6, 3, 2))
  par(omi = c(0, 0, 0, 0))
  par(pty = "m")
  SW <- shapiro.test(x)
  K <- round(kurtosis(x), 3)
  S <- round(skewness(x), 3)
  SWpval <- round(SW$p.value, 3)
  TOT <- c(n, UM, Min, Q1, Mean, Median, TrMean, Q3, Max, Stdev, 
           Var, SE, IQR, Range, K, S, SWpval)
  # #names(TOT) <- c("Size (n)", "Missing", "Minimum", " 1st Qu", 
  #                 "   Mean", " Median", "TrMean", " 3rd Qu", "   Max.", 
  #                 " Stdev.", "   Var.", "SE Mean", " I.Q.R.", "  Range", 
  #                 "Kurtosis", "Skewness", "SW p-val")
  names(TOT) <- c("Tamaño(n)", "Datos_Perdidos", "Minimo", "1st Qu", 
                  "Media", "Mediana", "TrMean", " 3rd Qu", "Maximo", 
                  "Dsv_Est", "Varianza", "SE Mean", "Rng_Int_Crt(I.Q.R.)", "Rango", 
                  "Curtosis (EC)", "CA", "p_valor")
  #return(TOT)
  ind <- which(x %in% outliers)
  valor <- list(Res=TOT,anomalos=outliers,pos=ind)
  return(valor)
}
haz.cero.na = function(x){ifelse(is.na(x),0,x)}
# Cargar Base -------------------------------------------------------------
MstOrn <- read_excel("MstOrn.xlsx")
yodo <- MstOrn$r_mst_rsl_ydo
# Analisis exploratorio -----------------------------------------
min <- round(min(yodo),2)
max <- round(max(yodo),2)
NumFilas <- length(MstOrn$r_mst_rsl_ydo)
promedio <- round(mean(yodo),2)
dsv_est <- round(sd(yodo),2)
Stdev <- round(sd(yodo, na.rm = TRUE), 3)
EDA <- EDA_modificado(yodo)
Medidas <- round(data.frame(Res=EDA$Res)[1],2)
MedidasPosicion <- round(summary(yodo),2)
## Graficas
hist(yodo,main = "Histograma de cantidad de yodo en orina", xlab = "Yodo en orina",
     ylab="Cantidad de alumnos", include.lowest = T, xlim =c(0, 650), ylim =c(0, 70))
boxplot(yodo, las = 1,col = '#98B1DD', xlab=' ', horizontal = TRUE)
qqnorm(yodo, col = "black",main = "", xlab = "Cuantiles teóricos", ylab = "Cuantiles muestrales", axes = TRUE)
qqline(yodo, col = "red")
# Remover outliers----
## Descripcion de la base de datos
corte1 <- MstOrn[c(1:136),]
corte2 <- MstOrn[c(138:289),]
MstOrn <- bind_rows(corte1,corte2)
yodo <- MstOrn$r_mst_rsl_ydo
min <- round(min(yodo),2)
max <- round(max(yodo),2)
NumFilas <- length(MstOrn$r_mst_rsl_ydo)
promedio <- round(mean(yodo),2)
dsv_est <- round(sd(yodo),2)
Stdev <- round(sd(yodo, na.rm = TRUE), 3)
Moda <- Mode(yodo)
EDA <- EDA_modificado(yodo)
Medidas <- round(data.frame(Res=EDA$Res)[1],2)
MedidasPosicion <- round(summary(yodo),2)
## Graficas
hist(yodo, main = "Histograma de cantidad de yodo en orina", xlab = "Yodo en orina",
     ylab="Cantidad de alumnos", include.lowest = T, xlim =c(0, 650), ylim =c(0, 70))
boxplot(yodo, las = 1,col = '#98B1DD', xlab=' ', horizontal = TRUE)
qqnorm(yodo, col = "black",main = "", xlab = "Cuantiles teóricos", ylab = "Cuantiles muestrales", axes = TRUE)
qqline(yodo, col = "red")
# Análisis de varianza----
## Determinar si la ingesta de yodo de cada alumnos dependen de la parroquia en donde el alumno vive
### Anova1 - Parroquia
glimpse(MstOrn)
MstOrn <- MstOrn %>% mutate(s_prq_tpo_nme_fct = as.factor(MstOrn$s_prq_tpo_nme))
prq_anova <- aov(r_mst_rsl_ydo ~ s_prq_tpo_nme_fct, data= MstOrn)
summary(prq_anova)
pairwise.t.test(MstOrn$r_mst_rsl_ydo, MstOrn$s_prq_tpo_nme_fct)
#no se rechaza la dependencia es decir depende de la parroquia donde se encuentra
### Anova2 - Sexo
MstOrn <- MstOrn %>% mutate(s_pct_sxo_fct = as.factor(MstOrn$s_pct_sxo))
sxo_anova <- aov(r_mst_rsl_ydo ~ s_pct_sxo_fct, data= MstOrn)
summary(sxo_anova)
### Anova3 - Provincia
MstOrn <- MstOrn %>% mutate(s_prv_nme_fct = as.factor(MstOrn$s_prv_nme))
prv_anova <- aov(r_mst_rsl_ydo ~ s_prv_nme_fct, data= MstOrn)
summary(prv_anova)
# Correlacion -------------------------------------------------------------
##Test de normalidad Shapiro-Wilk
MstOrn <- MstOrn %>% mutate(yodo_sal = haz.cero.na(MstOrn$yodo_sal))
MstOrn <- MstOrn %>% mutate(yodo_sal=as.numeric(MstOrn$yodo_sal))
shapiro.test((MstOrn$yodo_sal))  # Normalidad
shapiro.test(MstOrn$r_mst_rsl_ydo) # No nomalidad
##Con Sal
MstOrn %>% ggplot(., aes(MstOrn$yodo_sal,MstOrn$r_mst_rsl_ydo)) + 
  geom_point() + xlab("yodo_sal (ppm)") + ylab("yodo_ingesta (µg/l)")
glimpse(MstOrn)
MstOrn <- MstOrn %>% mutate(yodo_sal = haz.cero.na(MstOrn$yodo_sal))
cor.test(MstOrn$yodo_sal, MstOrn$r_mst_rsl_ydo)
##Con Absorción
MstOrn %>% ggplot(., aes(MstOrn$r_mst_rsl_ydo,MstOrn$r_mst_rsl_abs)) + 
  geom_point() + xlab("yodo_ingesta (µg/l)") + ylab("yodo_abs")
cor.test(MstOrn$r_mst_rsl_abs, MstOrn$r_mst_rsl_ydo)
# Regresion lineal simple -------------------------------------------------
datos_ensanut <- read_excel("temp.xlsx")
glimpse(datos_ensanut)
cor.test(datos_ensanut$peso2_dbl,datos_ensanut$peso2_dbl)
shapiro.test(datos_ensanut$peso2_dbl)  # No nomalidad
shapiro.test(datos_ensanut$talla2_dbl) # No nomalidad
hist(datos_ensanut$talla2_dbl, main = " ", xlab = "Talla",
     ylab="Cantidad", include.lowest = T)#, xlim =c(0, 1400), ylim =c(0, 70))
hist(datos_ensanut$peso2_dbl, main = " ", xlab = "Talla",
     ylab="Cantidad", include.lowest = T)#, xlim =c(0, 1400), ylim =c(0, 70))
EDA_modificado(datos_ensanut$talla2_dbl)
EDA_modificado(datos_ensanut$peso2_dbl)
mod_1 <- lm(peso2_dbl ~ talla2_dbl, data = datos_ensanut)
summary(mod_1)
datos_ensanut %>%
  ggplot(., aes(x= talla2_dbl)) + ylab("Peso") +
  geom_point(aes(y= peso2_dbl)) + xlab("Talla")
## Crea una tabla de datos base para predecir
grid <- datos_ensanut %>% data_grid(talla2_dbl) 
grid <- grid %>% add_predictions(mod_1, var = 'PREDIC') #Agrega predicciones
datos_ensanut %>% ggplot(., aes(x= talla2_dbl)) + geom_point(aes(y= peso2_dbl)) + 
  geom_line(aes(y= PREDIC), data = grid, colour = "red", size = 1) +
  ggtitle("Datos Ensanut + predicción") + xlab("Talla") + ylab("Peso") ## Graficar
